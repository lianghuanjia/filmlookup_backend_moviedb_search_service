package com.example.movie_service.moviesearch.integration.controller;


import com.example.movie_service.dto.CrewMember;
import com.example.movie_service.dto.MovieSearchQueryDTO;
import com.example.movie_service.dto.OneMovieDetailsDTO;
import com.example.movie_service.moviesearch.integration.util.dataInitService.DataInitializerService;
import com.example.movie_service.moviesearch.integration.util.junitExtension.MySQLTestContainerExtension;
import com.example.movie_service.response.CustomResponse;
import jakarta.persistence.EntityManager;
import jakarta.persistence.NoResultException;
import jakarta.persistence.PersistenceContext;
import jakarta.persistence.TypedQuery;
import org.junit.jupiter.api.AfterEach;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.boot.test.web.client.TestRestTemplate;
import org.springframework.boot.test.web.server.LocalServerPort;
import org.springframework.core.ParameterizedTypeReference;
import org.springframework.http.HttpMethod;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.test.annotation.DirtiesContext;
import org.springframework.test.context.ActiveProfiles;
import org.springframework.web.util.UriComponentsBuilder;

import java.net.URI;
import java.util.Collections;
import java.util.List;

import static com.example.movie_service.constant.MovieConstant.*;
import static com.example.movie_service.constants.TestConstant.*;
import static com.example.movie_service.constants.TestConstant.ORDER_BY_TITLE;
import static org.junit.jupiter.api.Assertions.*;

@ActiveProfiles("test") // To load application-test.properties
@ExtendWith(MySQLTestContainerExtension.class)
@DirtiesContext // Importantly, this recreates the application context and allows our test classes to interact with a separate MySQL instance, running on a random port.
@SpringBootTest(webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT)
class ControllerIntegrationTest {

    @PersistenceContext
    EntityManager entityManager;

    @Autowired
    private TestRestTemplate restTemplate;

    @Autowired
    private DataInitializerService dataInitializerService;

    // Get the random port generated by @SpringBootTest
    @LocalServerPort
    private int port;

    private static final String protocolAndHost = "http://localhost:";
    private String searchMoviePath;
    // Define the response type using ParameterizedTypeReference
    private final ParameterizedTypeReference<CustomResponse<List<MovieSearchQueryDTO>>> responseType =
            new ParameterizedTypeReference<>() {
            };

    private final ParameterizedTypeReference<CustomResponse<OneMovieDetailsDTO>> oneMovieDetailsResponseType =
            new ParameterizedTypeReference<>() {
            };

    @BeforeEach
    public void setUp() {
        String baseUrl = protocolAndHost + port + "/v1/api";
        searchMoviePath = baseUrl + "/movies";

        dataInitializerService.checkDatabaseEmpty();
        dataInitializerService.initializeData();
    }

    @AfterEach
    public void afterEach() {
        // Clean the database
        dataInitializerService.clearDatabase();
    }

    @Test
    void testSearchMoviesMovieFound() {
        // Define URI with query param
        URI uri = UriComponentsBuilder.fromHttpUrl(searchMoviePath)
                .queryParam(ORDER_BY_TITLE, EXISTED_MOVIE_TITLE)
                .build().toUri();

        // Perform a GET request to the controller
        ResponseEntity<CustomResponse<List<MovieSearchQueryDTO>>> results = restTemplate.exchange
                (uri, HttpMethod.GET, null, responseType);

        // Assert
        assertTrue(results.getStatusCode().is2xxSuccessful());
        CustomResponse<List<MovieSearchQueryDTO>> customResponse = results.getBody();
        assertNotNull(customResponse);
        // Assert that the return code is 20001, representing movies found
        assertEquals(MOVIE_FOUND_CODE, customResponse.getCode());
        assertEquals(MOVIE_FOUND_MESSAGE, customResponse.getMessage());
        List<MovieSearchQueryDTO> movieList = customResponse.getData();
        // Assert there are 3 movies
        assertEquals(3, movieList.size());
        // Assert 1st movie is The Dark Knight
        assertEquals(THE_DARK_KNIGHT, movieList.get(0).getTitle());
        assertEquals(THE_DARK_KNIGHT_RISES, movieList.get(1).getTitle());
        assertEquals(THE_DARK_KNIGHT_RISES_AGAIN, movieList.get(2).getTitle());
    }

    @Test
    void testSearchMoviesMovieFound_MoviesWithoutPosterPathAreNotIncluded() {
        // Insert 2 new movies, one has poster path and the other doesn't.
        dataInitializerService.generateTwoMoviesWithAndWithoutPosterPath();

        // Define URI with query param
        URI uri = UriComponentsBuilder.fromHttpUrl(searchMoviePath)
                .queryParam(ORDER_BY_TITLE, MOVIE_TITLE_FOR_RETURN_RESULTS_NOT_INCLUDING_POSTER_PATH)
                .build().toUri();

        // Perform a GET request to the controller
        ResponseEntity<CustomResponse<List<MovieSearchQueryDTO>>> results = restTemplate.exchange
                (uri, HttpMethod.GET, null, responseType);

        // Assert
        assertTrue(results.getStatusCode().is2xxSuccessful());
        CustomResponse<List<MovieSearchQueryDTO>> customResponse = results.getBody();
        assertNotNull(customResponse);
        // Assert that the return code is 20001, representing movies found
        assertEquals(MOVIE_FOUND_CODE, customResponse.getCode());
        assertEquals(MOVIE_FOUND_MESSAGE, customResponse.getMessage());
        List<MovieSearchQueryDTO> movieList = customResponse.getData();
        // Assert there are 3 movies
        assertEquals(1, movieList.size());
        // Assert 1st movie is The Dark Knight
        assertEquals(MOVIE_TITLE_FOR_RETURN_RESULTS_NOT_INCLUDING_POSTER_PATH, movieList.get(0).getTitle());
    }

    @Test
    void testSearchMoviesNotFound() {
        URI uri = UriComponentsBuilder.fromHttpUrl(searchMoviePath)
                .queryParam(ORDER_BY_TITLE, NON_EXISTED_MOVIE_TITLE)
                .build().toUri();

        // Perform a GET request to the controller
        ResponseEntity<CustomResponse<List<MovieSearchQueryDTO>>> results = restTemplate.exchange
                (uri, HttpMethod.GET, null, responseType);

        // Assert the status code is OK, and we have a customResponse
        assertTrue(results.getStatusCode().is2xxSuccessful());
        CustomResponse<List<MovieSearchQueryDTO>> customResponse = results.getBody();
        assertNotNull(customResponse);

        // Assert the code and message are MOVIE_NOT_FOUND
        assertEquals(MOVIE_NOT_FOUND_CODE, customResponse.getCode());
        assertEquals(MOVIE_NOT_FOUND_MESSAGE, customResponse.getMessage());

        // Assert the MovieSearchResultDTO List is empty
        assertTrue(customResponse.getData().isEmpty());
    }

    @Test
    void SearchMoviesNoTitle() {
        URI uri = UriComponentsBuilder.fromHttpUrl(searchMoviePath)
                .build().toUri();

        // Perform a GET request to the controller
        ResponseEntity<CustomResponse<List<MovieSearchQueryDTO>>> results = restTemplate.exchange
                (uri, HttpMethod.GET, null, responseType);

        // Assert the status code is OK, and we have a customResponse
        assertTrue(results.getStatusCode().is4xxClientError());
        CustomResponse<List<MovieSearchQueryDTO>> customResponse = results.getBody();
        assertNotNull(customResponse);

        // Assert the code and message are MOVIE_NOT_FOUND
        assertEquals(MISSING_REQUIRED_PARAMETER_CODE, customResponse.getCode());
        assertEquals(MISSING_REQUIRED_PARAMETER_MESSAGE_PREFIX + TITLE, customResponse.getMessage());

        // Assert the MovieSearchResultDTO List is empty
        assertNull(customResponse.getData());
    }

    @Test
    void testSearchMoviesValidYear() {
        String validYear = "2012";
        // Define URI with query param
        URI uri = UriComponentsBuilder.fromHttpUrl(searchMoviePath)
                .queryParam(ORDER_BY_TITLE, EXISTED_MOVIE_TITLE)
                .queryParam(RELEASED_YEAR, validYear)
                .build().toUri();

        // Perform a GET request to the controller
        ResponseEntity<CustomResponse<List<MovieSearchQueryDTO>>> results = restTemplate.exchange
                (uri, HttpMethod.GET, null, responseType);

        // Assert
        assertTrue(results.getStatusCode().is2xxSuccessful());
        CustomResponse<List<MovieSearchQueryDTO>> customResponse = results.getBody();
        assertNotNull(customResponse);
        // Assert that the return code is MOVIE_FOUND_CODE, representing movies found
        assertEquals(MOVIE_FOUND_CODE, customResponse.getCode());
        assertEquals(MOVIE_FOUND_MESSAGE, customResponse.getMessage());
        List<MovieSearchQueryDTO> movieList = customResponse.getData();
        // Assert there are 2 movies with release time in 2012.
        assertEquals(2, movieList.size());
        // Assert 1st movie is The Dark Knight Rises, and the second one is The Dark Knight Rises Again,
        // because we didn't put orderBy and direction in the query param, so it sets to default with
        // orderBy = "title", direction = "asc".
        assertEquals(THE_DARK_KNIGHT_RISES, movieList.get(0).getTitle());
        assertEquals(THE_DARK_KNIGHT_RISES_AGAIN, movieList.get(1).getTitle());
    }

    @Test
    void searchMovieWithOrderByRatingAndAsc() {
        URI uri = UriComponentsBuilder.fromHttpUrl(searchMoviePath)
                .queryParam(ORDER_BY_TITLE, EXISTED_MOVIE_TITLE)
                .queryParam(ORDER_BY, RATING)
                .build().toUri();

        // Perform a GET request to the controller
        ResponseEntity<CustomResponse<List<MovieSearchQueryDTO>>> results = restTemplate.exchange
                (uri, HttpMethod.GET, null, responseType);

        // Assert
        assertTrue(results.getStatusCode().is2xxSuccessful());
        CustomResponse<List<MovieSearchQueryDTO>> customResponse = results.getBody();
        assertNotNull(customResponse);
        // Assert that the return code is MOVIE_FOUND_CODE, representing movies found
        assertEquals(MOVIE_FOUND_CODE, customResponse.getCode());
        assertEquals(MOVIE_FOUND_MESSAGE, customResponse.getMessage());
        List<MovieSearchQueryDTO> movieList = customResponse.getData();

        // Assert movieList has 3 movies
        assertEquals(3, movieList.size());

        // Assert first movie's rating < second movie's rating < third movie's rating
        assertTrue(movieList.get(0).getRating() < movieList.get(1).getRating()
                && movieList.get(1).getRating() < movieList.get(2).getRating());
    }

    @Test
    void searchMovieWithOrderByRatingAndDesc() {
        URI uri = UriComponentsBuilder.fromHttpUrl(searchMoviePath)
                .queryParam(ORDER_BY_TITLE, EXISTED_MOVIE_TITLE)
                .queryParam(ORDER_BY, RATING)
                .queryParam(DIRECTION, DESC)
                .build().toUri();

        // Perform a GET request to the controller
        ResponseEntity<CustomResponse<List<MovieSearchQueryDTO>>> results = restTemplate.exchange
                (uri, HttpMethod.GET, null, responseType);

        // Assert
        assertTrue(results.getStatusCode().is2xxSuccessful());
        CustomResponse<List<MovieSearchQueryDTO>> customResponse = results.getBody();
        assertNotNull(customResponse);
        // Assert that the return code is MOVIE_FOUND_CODE, representing movies found
        assertEquals(MOVIE_FOUND_CODE, customResponse.getCode());
        assertEquals(MOVIE_FOUND_MESSAGE, customResponse.getMessage());
        List<MovieSearchQueryDTO> movieList = customResponse.getData();

        // Assert movieList has 3 movies
        assertEquals(3, movieList.size());

        // Assert first movie's rating > second movie's rating > third movie's rating
        assertTrue(movieList.get(0).getRating() > movieList.get(1).getRating()
                && movieList.get(1).getRating() > movieList.get(2).getRating());
    }

    @Test
    void TestPageOneOrderByRatingAsc() {
        dataInitializerService.insertMovieData();
        URI uri = UriComponentsBuilder.fromHttpUrl(searchMoviePath)
                .queryParam(TITLE, TITLE_STARTS_WITH_MOVIE)
                .queryParam(ORDER_BY, RATING)
                .queryParam(DIRECTION, ASC)
                .queryParam(PAGE, 1)
                .build().toUri();

        // Perform a GET request to the controller
        ResponseEntity<CustomResponse<List<MovieSearchQueryDTO>>> results = restTemplate.exchange
                (uri, HttpMethod.GET, null, responseType);

        assertTrue(results.getStatusCode().is2xxSuccessful());
        CustomResponse<List<MovieSearchQueryDTO>> customResponse = results.getBody();
        assertNotNull(customResponse);
        // Assert that the return code is MOVIE_FOUND_CODE, representing movies found
        assertEquals(MOVIE_FOUND_CODE, customResponse.getCode());
        assertEquals(MOVIE_FOUND_MESSAGE, customResponse.getMessage());
        List<MovieSearchQueryDTO> movieList = customResponse.getData();

        MovieSearchQueryDTO movie11 = movieList.get(0);
        assertEquals(MOVIE_11_TITLE, movie11.getTitle());
        assertEquals(MOVIE_11_RATING, movie11.getRating());
    }

    @Test
    void SearchMoviesInvalidReleasedYear() {
        String invalidYear = "2025";
        URI uri = UriComponentsBuilder.fromHttpUrl(searchMoviePath)
                .queryParam(ORDER_BY_TITLE, EXISTED_MOVIE_TITLE)
                .queryParam(RELEASED_YEAR, invalidYear)
                .build().toUri();

        // Perform a GET request to the controller
        ResponseEntity<CustomResponse<List<MovieSearchQueryDTO>>> results = restTemplate.exchange
                (uri, HttpMethod.GET, null, responseType);

        // Assert the status code is BAD_REQUEST, and we have a customResponse
        assertTrue(results.getStatusCode().is4xxClientError());
        CustomResponse<List<MovieSearchQueryDTO>> customResponse = results.getBody();
        assertNotNull(customResponse);

        // Assert the code and message are INVALID_YEAR
        assertEquals(INVALID_YEAR_CODE, customResponse.getCode());
        assertEquals(INVALID_YEAR_MESSAGE, customResponse.getMessage());

        // Assert the data in customResponse is null
        assertNull(customResponse.getData());
    }

    @Test
    void searchMoviesValidWithReleaseTimeOrderByAndDescDirection() {
        // Define URI with query param
        URI uri = UriComponentsBuilder.fromHttpUrl(searchMoviePath)
                .queryParam(ORDER_BY_TITLE, EXISTED_MOVIE_TITLE)
                .queryParam(ORDER_BY, RELEASE_TIME)
                .queryParam(DIRECTION, DESC)
                .build().toUri();

        // Perform a GET request to the controller
        ResponseEntity<CustomResponse<List<MovieSearchQueryDTO>>> results = restTemplate.exchange
                (uri, HttpMethod.GET, null, responseType);

        // Assert
        assertTrue(results.getStatusCode().is2xxSuccessful());
        CustomResponse<List<MovieSearchQueryDTO>> customResponse = results.getBody();
        assertNotNull(customResponse);
        // Assert that the return code is MOVIE_FOUND_CODE, representing movies found
        assertEquals(MOVIE_FOUND_CODE, customResponse.getCode());
        assertEquals(MOVIE_FOUND_MESSAGE, customResponse.getMessage());
        List<MovieSearchQueryDTO> movieList = customResponse.getData();
        // Assert there are 3 movies
        assertEquals(3, movieList.size());
        // Assert 1st movie is The Dark Knight Rises Again, since it has the latest release time
        assertEquals(THE_DARK_KNIGHT_RISES_AGAIN, movieList.get(0).getTitle());
        assertEquals(THE_DARK_KNIGHT_RISES, movieList.get(1).getTitle());
        assertEquals(THE_DARK_KNIGHT, movieList.get(2).getTitle());
    }

    @Test
    void SearchMoviesInvalidOrderBy() {
        URI uri = UriComponentsBuilder.fromHttpUrl(searchMoviePath)
                .queryParam(ORDER_BY_TITLE, EXISTED_MOVIE_TITLE)
                .queryParam(ORDER_BY, DIRECTOR_ROLE)
                .build().toUri();

        // Perform a GET request to the controller
        ResponseEntity<CustomResponse<List<MovieSearchQueryDTO>>> results = restTemplate.exchange
                (uri, HttpMethod.GET, null, responseType);

        // Assert the status code is BAD_REQUEST, and we have a customResponse
        assertTrue(results.getStatusCode().is4xxClientError());
        CustomResponse<List<MovieSearchQueryDTO>> customResponse = results.getBody();
        assertNotNull(customResponse);

        // Assert the code and message are INVALID_ORDER_BY
        assertEquals(INVALID_ORDER_BY_CODE, customResponse.getCode());
        assertEquals(INVALID_ORDER_BY_MESSAGE, customResponse.getMessage());

        // Assert the data in customResponse is null
        assertNull(customResponse.getData());
    }

    @Test
    void SearchMoviesInvalidDirection() {
        String invalidDirection = "up";
        URI uri = UriComponentsBuilder.fromHttpUrl(searchMoviePath)
                .queryParam(ORDER_BY_TITLE, EXISTED_MOVIE_TITLE)
                .queryParam(DIRECTION, invalidDirection)
                .build().toUri();

        // Perform a GET request to the controller
        ResponseEntity<CustomResponse<List<MovieSearchQueryDTO>>> results = restTemplate.exchange
                (uri, HttpMethod.GET, null, responseType);

        // Assert the status code is BAD_REQUEST, and we have a customResponse
        assertTrue(results.getStatusCode().is4xxClientError());
        CustomResponse<List<MovieSearchQueryDTO>> customResponse = results.getBody();
        assertNotNull(customResponse);

        // Assert the code and message are INVALID_YEAR
        assertEquals(INVALID_DIRECTION_CODE, customResponse.getCode());
        assertEquals(INVALID_DIRECTION_MESSAGE, customResponse.getMessage());

        // Assert the data in customResponse is null
        assertNull(customResponse.getData());
    }


    @Test
    void SearchOneMovieDetails_MovieFound_CrewMembersFound() {
        String movie1Id = getMovieIdByMovieTitle(THE_DARK_KNIGHT);
        assertNotNull(movie1Id);

        URI uri = UriComponentsBuilder.fromHttpUrl(searchMoviePath+"/"+movie1Id).build().toUri();

        // Perform a GET request to the controller
        ResponseEntity<CustomResponse<OneMovieDetailsDTO>> responseEntity = restTemplate.exchange
                (uri, HttpMethod.GET, null, oneMovieDetailsResponseType);

        assertTrue(responseEntity.getStatusCode().is2xxSuccessful());
        assertNotNull(responseEntity.getBody());
        CustomResponse<OneMovieDetailsDTO> customResponse = responseEntity.getBody();

        assertNotNull(customResponse);
        assertEquals(MOVIE_FOUND_CODE, customResponse.getCode());
        assertEquals(MOVIE_FOUND_MESSAGE, customResponse.getMessage());

        OneMovieDetailsDTO singleMovieDetails = customResponse.getData();
        assertEquals(movie1Id, singleMovieDetails.getId());
        assertEquals(THE_DARK_KNIGHT, singleMovieDetails.getTitle());
        assertEquals(THE_DARK_KNIGHT_RELEASE_TIME, singleMovieDetails.getReleaseTime());
        assertTrue(singleMovieDetails.getGenres().contains(ACTION_GENRE));
        assertFalse(singleMovieDetails.getGenres().contains(LOVE_GENRE));
        List<CrewMember> crewMembers = singleMovieDetails.getCrewMemberList();
        assertEquals(3, crewMembers.size());
        assertTrue(crewMembers.stream().anyMatch(crewMember -> ACTOR_1_NAME.equals(crewMember.getName())));
        assertTrue(crewMembers.stream().anyMatch(crewMember -> ACTRESS_1_NAME.equals(crewMember.getName())));
        assertTrue(crewMembers.stream().anyMatch(crewMember -> DIRECTOR_NOLAN.equals(crewMember.getName())));
        assertFalse(crewMembers.stream().anyMatch(crewMember -> COMPOSER_1_NAME.equals(crewMember.getName())));
    }

    @Test
    void SearchOneMovieDetails_MovieFound_CrewMembersNotFound() {
        String movieWithTitleOnlyId = getMovieIdByMovieTitle(MOVIE_WITH_TITLE_ONLY);
        assertNotNull(movieWithTitleOnlyId);

        URI uri = UriComponentsBuilder.fromHttpUrl(searchMoviePath+"/"+movieWithTitleOnlyId).build().toUri();

        // Perform a GET request to the controller
        ResponseEntity<CustomResponse<OneMovieDetailsDTO>> responseEntity = restTemplate.exchange
                (uri, HttpMethod.GET, null, oneMovieDetailsResponseType);

        assertTrue(responseEntity.getStatusCode().is2xxSuccessful());
        assertNotNull(responseEntity.getBody());
        CustomResponse<OneMovieDetailsDTO> customResponse = responseEntity.getBody();

        assertNotNull(customResponse);
        assertEquals(MOVIE_FOUND_CODE, customResponse.getCode());
        assertEquals(MOVIE_FOUND_MESSAGE, customResponse.getMessage());

        OneMovieDetailsDTO singleMovieDetails = customResponse.getData();
        assertEquals(movieWithTitleOnlyId, singleMovieDetails.getId());
        assertEquals(MOVIE_WITH_TITLE_ONLY, singleMovieDetails.getTitle());
        assertNull(singleMovieDetails.getRating());
        assertNull(singleMovieDetails.getReleaseTime());
        assertNull(singleMovieDetails.getGenres());
        assertEquals(Collections.emptyList(), singleMovieDetails.getCrewMemberList());
        assertEquals(0, singleMovieDetails.getCrewMemberList().size());
    }

    @Test
    void SearchOneMovieDetails_MovieNotFound() {
        String movie1Id = "No such Id";
        URI uri = UriComponentsBuilder.fromHttpUrl(searchMoviePath+"/"+movie1Id).build().toUri();

        // Perform a GET request to the controller
        ResponseEntity<CustomResponse<OneMovieDetailsDTO>> responseEntity = restTemplate.exchange
                (uri, HttpMethod.GET, null, oneMovieDetailsResponseType);

        assertTrue(responseEntity.getStatusCode().is2xxSuccessful());
        assertNotNull(responseEntity.getBody());
        CustomResponse<OneMovieDetailsDTO> customResponse = responseEntity.getBody();

        assertNotNull(customResponse);
        assertEquals(MOVIE_NOT_FOUND_CODE, customResponse.getCode());
        assertEquals(MOVIE_NOT_FOUND_MESSAGE, customResponse.getMessage());
        assertNull(customResponse.getData());
    }

    @Test
    void SearchOneMovieDetails_MovieIdIsNull() {

        URI uri = UriComponentsBuilder.fromHttpUrl(searchMoviePath+"/").build().toUri();
        System.out.println(uri);
        // Perform a GET request to the controller
        ResponseEntity<CustomResponse<OneMovieDetailsDTO>> responseEntity = restTemplate.exchange
                (uri, HttpMethod.GET, null, oneMovieDetailsResponseType);

        assertTrue(responseEntity.getStatusCode().is4xxClientError());
        assertNotNull(responseEntity.getBody());
        CustomResponse<OneMovieDetailsDTO> customResponse = responseEntity.getBody();

        assertNotNull(customResponse);
        assertEquals(HttpStatus.NOT_FOUND.value(), customResponse.getCode());
        assertNull(customResponse.getData());
    }

    @Test
    void SearchOneMovieDetails_MovieIdIsEmptyString() {

        URI uri = UriComponentsBuilder.fromHttpUrl(searchMoviePath+"/"+"").build().toUri();
        System.out.println(uri);
        // Perform a GET request to the controller
        ResponseEntity<CustomResponse<OneMovieDetailsDTO>> responseEntity = restTemplate.exchange
                (uri, HttpMethod.GET, null, oneMovieDetailsResponseType);

        assertTrue(responseEntity.getStatusCode().is4xxClientError());
        assertNotNull(responseEntity.getBody());
        CustomResponse<OneMovieDetailsDTO> customResponse = responseEntity.getBody();

        assertNotNull(customResponse);
        assertEquals(HttpStatus.NOT_FOUND.value(), customResponse.getCode());
        assertNull(customResponse.getData());
    }

    String getMovieIdByMovieTitle(String title) {
        String jpql = "SELECT m.id FROM Movie m WHERE m.title = :title";

        // Create the query using EntityManager
        TypedQuery<String> query = entityManager.createQuery(jpql, String.class);
        query.setParameter("title", title);

        // Execute the query and get the result
        try {
            return query.getSingleResult();
        } catch (NoResultException e) {
            return null;
        }
    }

}
